/*
 * This file is generated by jOOQ.
 */
package de.sainth.recipemanager.db.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import de.sainth.recipemanager.db.generated.Indexes;
import de.sainth.recipemanager.db.generated.Keys;
import de.sainth.recipemanager.db.generated.Public;
import de.sainth.recipemanager.db.generated.tables.records.UnitRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Unit extends TableImpl<UnitRecord> {

  private static final long serialVersionUID = -1191725596;

  /**
   * The reference instance of <code>public.unit</code>
   */
  public static final Unit UNIT = new Unit();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<UnitRecord> getRecordType() {
    return UnitRecord.class;
  }

  /**
   * The column <code>public.unit.unit_name</code>.
   */
  public final TableField<UnitRecord, String> UNIT_NAME = createField("unit_name",
                                                                      org.jooq.impl.SQLDataType.VARCHAR(10)
                                                                                               .nullable(false),
                                                                      this,
                                                                      "");

  /**
   * Create a <code>public.unit</code> table reference
   */
  public Unit() {
    this(DSL.name("unit"), null);
  }

  /**
   * Create an aliased <code>public.unit</code> table reference
   */
  public Unit(String alias) {
    this(DSL.name(alias), UNIT);
  }

  /**
   * Create an aliased <code>public.unit</code> table reference
   */
  public Unit(Name alias) {
    this(alias, UNIT);
  }

  private Unit(Name alias, Table<UnitRecord> aliased) {
    this(alias, aliased, null);
  }

  private Unit(Name alias, Table<UnitRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> Unit(Table<O> child, ForeignKey<O, UnitRecord> key) {
    super(child, key, UNIT);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.UNIT_PKEY);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public UniqueKey<UnitRecord> getPrimaryKey() {
    return Keys.UNIT_PKEY;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<UniqueKey<UnitRecord>> getKeys() {
    return Arrays.<UniqueKey<UnitRecord>>asList(Keys.UNIT_PKEY);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Unit as(String alias) {
    return new Unit(DSL.name(alias), this);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Unit as(Name alias) {
    return new Unit(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Unit rename(String name) {
    return new Unit(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Unit rename(Name name) {
    return new Unit(name, null);
  }
}
