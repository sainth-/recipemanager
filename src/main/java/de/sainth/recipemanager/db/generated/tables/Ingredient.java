/*
 * This file is generated by jOOQ.
 */
package de.sainth.recipemanager.db.generated.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import de.sainth.recipemanager.db.generated.Indexes;
import de.sainth.recipemanager.db.generated.Keys;
import de.sainth.recipemanager.db.generated.Public;
import de.sainth.recipemanager.db.generated.tables.records.IngredientRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ingredient extends TableImpl<IngredientRecord> {

  private static final long serialVersionUID = -1410129152;

  /**
   * The reference instance of <code>public.ingredient</code>
   */
  public static final Ingredient INGREDIENT = new Ingredient();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<IngredientRecord> getRecordType() {
    return IngredientRecord.class;
  }

  /**
   * The column <code>public.ingredient.ingredient_id</code>.
   */
  public final TableField<IngredientRecord, Long> INGREDIENT_ID = createField("ingredient_id",
                                                                              org.jooq.impl.SQLDataType.BIGINT
                                                                                  .nullable(false)
                                                                                  .defaultValue(org.jooq.impl.DSL
                                                                                                    .field(
                                                                                                        "nextval('ingredient_ingredient_id_seq'::regclass)",
                                                                                                        org.jooq.impl.SQLDataType.BIGINT)),
                                                                              this,
                                                                              "");

  /**
   * The column <code>public.ingredient.recipe_id</code>.
   */
  public final TableField<IngredientRecord, Long> RECIPE_ID = createField("recipe_id",
                                                                          org.jooq.impl.SQLDataType.BIGINT.nullable(
                                                                              false),
                                                                          this,
                                                                          "");

  /**
   * The column <code>public.ingredient.food_name</code>.
   */
  public final TableField<IngredientRecord, String> FOOD_NAME = createField("food_name",
                                                                            org.jooq.impl.SQLDataType.VARCHAR(
                                                                                64).nullable(false),
                                                                            this,
                                                                            "");

  /**
   * The column <code>public.ingredient.amount</code>.
   */
  public final TableField<IngredientRecord, BigDecimal> AMOUNT = createField("amount",
                                                                             org.jooq.impl.SQLDataType.NUMERIC(
                                                                                 14,
                                                                                 4),
                                                                             this,
                                                                             "");

  /**
   * The column <code>public.ingredient.unit_name</code>.
   */
  public final TableField<IngredientRecord, String> UNIT_NAME = createField("unit_name",
                                                                            org.jooq.impl.SQLDataType.VARCHAR(
                                                                                10),
                                                                            this,
                                                                            "");

  /**
   * Create a <code>public.ingredient</code> table reference
   */
  public Ingredient() {
    this(DSL.name("ingredient"), null);
  }

  /**
   * Create an aliased <code>public.ingredient</code> table reference
   */
  public Ingredient(String alias) {
    this(DSL.name(alias), INGREDIENT);
  }

  /**
   * Create an aliased <code>public.ingredient</code> table reference
   */
  public Ingredient(Name alias) {
    this(alias, INGREDIENT);
  }

  private Ingredient(Name alias, Table<IngredientRecord> aliased) {
    this(alias, aliased, null);
  }

  private Ingredient(Name alias, Table<IngredientRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> Ingredient(Table<O> child, ForeignKey<O, IngredientRecord> key) {
    super(child, key, INGREDIENT);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.INGREDIENT_PKEY);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Identity<IngredientRecord, Long> getIdentity() {
    return Keys.IDENTITY_INGREDIENT;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public UniqueKey<IngredientRecord> getPrimaryKey() {
    return Keys.INGREDIENT_PKEY;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<UniqueKey<IngredientRecord>> getKeys() {
    return Arrays.<UniqueKey<IngredientRecord>>asList(Keys.INGREDIENT_PKEY);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<ForeignKey<IngredientRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<IngredientRecord, ?>>asList(Keys.INGREDIENT__INGREDIENT_RECIPE_ID_FKEY,
                                                          Keys.INGREDIENT__INGREDIENT_UNIT_NAME_FKEY);
  }

  public Recipe recipe() {
    return new Recipe(this, Keys.INGREDIENT__INGREDIENT_RECIPE_ID_FKEY);
  }

  public Unit unit() {
    return new Unit(this, Keys.INGREDIENT__INGREDIENT_UNIT_NAME_FKEY);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Ingredient as(String alias) {
    return new Ingredient(DSL.name(alias), this);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Ingredient as(Name alias) {
    return new Ingredient(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Ingredient rename(String name) {
    return new Ingredient(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Ingredient rename(Name name) {
    return new Ingredient(name, null);
  }
}
