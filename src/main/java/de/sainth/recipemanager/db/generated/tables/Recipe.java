/*
 * This file is generated by jOOQ.
 */
package de.sainth.recipemanager.db.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import de.sainth.recipemanager.db.generated.Indexes;
import de.sainth.recipemanager.db.generated.Keys;
import de.sainth.recipemanager.db.generated.Public;
import de.sainth.recipemanager.db.generated.tables.records.RecipeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Recipe extends TableImpl<RecipeRecord> {

  private static final long serialVersionUID = -1112679544;

  /**
   * The reference instance of <code>public.recipe</code>
   */
  public static final Recipe RECIPE = new Recipe();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<RecipeRecord> getRecordType() {
    return RecipeRecord.class;
  }

  /**
   * The column <code>public.recipe.recipe_id</code>.
   */
  public final TableField<RecipeRecord, Long> RECIPE_ID = createField("recipe_id",
                                                                      org.jooq.impl.SQLDataType.BIGINT.nullable(
                                                                          false)
                                                                                                      .defaultValue(
                                                                                                          org.jooq.impl.DSL
                                                                                                              .field(
                                                                                                                  "nextval('recipe_recipe_id_seq'::regclass)",
                                                                                                                  org.jooq.impl.SQLDataType.BIGINT)),
                                                                      this,
                                                                      "");

  /**
   * The column <code>public.recipe.name</code>.
   */
  public final TableField<RecipeRecord, String> NAME = createField("name",
                                                                   org.jooq.impl.SQLDataType.VARCHAR(64)
                                                                                            .nullable(false),
                                                                   this,
                                                                   "");

  /**
   * The column <code>public.recipe.description</code>.
   */
  public final TableField<RecipeRecord, String> DESCRIPTION = createField("description",
                                                                          org.jooq.impl.SQLDataType.CLOB,
                                                                          this,
                                                                          "");

  /**
   * The column <code>public.recipe.portions</code>.
   */
  public final TableField<RecipeRecord, Short> PORTIONS = createField("portions",
                                                                      org.jooq.impl.SQLDataType.SMALLINT.nullable(
                                                                          false),
                                                                      this,
                                                                      "");

  /**
   * Create a <code>public.recipe</code> table reference
   */
  public Recipe() {
    this(DSL.name("recipe"), null);
  }

  /**
   * Create an aliased <code>public.recipe</code> table reference
   */
  public Recipe(String alias) {
    this(DSL.name(alias), RECIPE);
  }

  /**
   * Create an aliased <code>public.recipe</code> table reference
   */
  public Recipe(Name alias) {
    this(alias, RECIPE);
  }

  private Recipe(Name alias, Table<RecipeRecord> aliased) {
    this(alias, aliased, null);
  }

  private Recipe(Name alias, Table<RecipeRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> Recipe(Table<O> child, ForeignKey<O, RecipeRecord> key) {
    super(child, key, RECIPE);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.RECIPE_PKEY);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Identity<RecipeRecord, Long> getIdentity() {
    return Keys.IDENTITY_RECIPE;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public UniqueKey<RecipeRecord> getPrimaryKey() {
    return Keys.RECIPE_PKEY;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<UniqueKey<RecipeRecord>> getKeys() {
    return Arrays.<UniqueKey<RecipeRecord>>asList(Keys.RECIPE_PKEY);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Recipe as(String alias) {
    return new Recipe(DSL.name(alias), this);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Recipe as(Name alias) {
    return new Recipe(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Recipe rename(String name) {
    return new Recipe(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Recipe rename(Name name) {
    return new Recipe(name, null);
  }
}
