/*
 * This file is generated by jOOQ.
 */
package de.sainth.recipemanager.db.generated.tables.records;


import java.math.BigDecimal;

import javax.annotation.Generated;

import de.sainth.recipemanager.db.generated.tables.Ingredient;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IngredientRecord extends UpdatableRecordImpl<IngredientRecord> implements Record5<Long, Long, String, BigDecimal, String> {

  private static final long serialVersionUID = 733631182;

  /**
   * Setter for <code>public.ingredient.ingredient_id</code>.
   */
  public void setIngredientId(Long value) {
    set(0, value);
  }

  /**
   * Getter for <code>public.ingredient.ingredient_id</code>.
   */
  public Long getIngredientId() {
    return (Long) get(0);
  }

  /**
   * Setter for <code>public.ingredient.recipe_id</code>.
   */
  public void setRecipeId(Long value) {
    set(1, value);
  }

  /**
   * Getter for <code>public.ingredient.recipe_id</code>.
   */
  public Long getRecipeId() {
    return (Long) get(1);
  }

  /**
   * Setter for <code>public.ingredient.food_name</code>.
   */
  public void setFoodName(String value) {
    set(2, value);
  }

  /**
   * Getter for <code>public.ingredient.food_name</code>.
   */
  public String getFoodName() {
    return (String) get(2);
  }

  /**
   * Setter for <code>public.ingredient.amount</code>.
   */
  public void setAmount(BigDecimal value) {
    set(3, value);
  }

  /**
   * Getter for <code>public.ingredient.amount</code>.
   */
  public BigDecimal getAmount() {
    return (BigDecimal) get(3);
  }

  /**
   * Setter for <code>public.ingredient.unit_name</code>.
   */
  public void setUnitName(String value) {
    set(4, value);
  }

  /**
   * Getter for <code>public.ingredient.unit_name</code>.
   */
  public String getUnitName() {
    return (String) get(4);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  /**
   * {@inheritDoc}
   */
  @Override
  public Record1<Long> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record5 type implementation
  // -------------------------------------------------------------------------

  /**
   * {@inheritDoc}
   */
  @Override
  public Row5<Long, Long, String, BigDecimal, String> fieldsRow() {
    return (Row5) super.fieldsRow();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Row5<Long, Long, String, BigDecimal, String> valuesRow() {
    return (Row5) super.valuesRow();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Field<Long> field1() {
    return Ingredient.INGREDIENT.INGREDIENT_ID;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Field<Long> field2() {
    return Ingredient.INGREDIENT.RECIPE_ID;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Field<String> field3() {
    return Ingredient.INGREDIENT.FOOD_NAME;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Field<BigDecimal> field4() {
    return Ingredient.INGREDIENT.AMOUNT;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Field<String> field5() {
    return Ingredient.INGREDIENT.UNIT_NAME;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Long component1() {
    return getIngredientId();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Long component2() {
    return getRecipeId();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public String component3() {
    return getFoodName();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public BigDecimal component4() {
    return getAmount();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public String component5() {
    return getUnitName();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Long value1() {
    return getIngredientId();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Long value2() {
    return getRecipeId();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public String value3() {
    return getFoodName();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public BigDecimal value4() {
    return getAmount();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public String value5() {
    return getUnitName();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public IngredientRecord value1(Long value) {
    setIngredientId(value);
    return this;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public IngredientRecord value2(Long value) {
    setRecipeId(value);
    return this;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public IngredientRecord value3(String value) {
    setFoodName(value);
    return this;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public IngredientRecord value4(BigDecimal value) {
    setAmount(value);
    return this;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public IngredientRecord value5(String value) {
    setUnitName(value);
    return this;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public IngredientRecord values(Long value1, Long value2, String value3, BigDecimal value4, String value5) {
    value1(value1);
    value2(value2);
    value3(value3);
    value4(value4);
    value5(value5);
    return this;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
   * Create a detached IngredientRecord
   */
  public IngredientRecord() {
    super(Ingredient.INGREDIENT);
  }

  /**
   * Create a detached, initialised IngredientRecord
   */
  public IngredientRecord(Long ingredientId,
                          Long recipeId,
                          String foodName,
                          BigDecimal amount,
                          String unitName) {
    super(Ingredient.INGREDIENT);

    set(0, ingredientId);
    set(1, recipeId);
    set(2, foodName);
    set(3, amount);
    set(4, unitName);
  }
}
